# List comprehension
# К сожалению, дословно на русский язык перевести этот термин не представляется
# возможным, но в разных источниках можно встретить названия — списковые включения,
# списковые вложения или генераторы списков.
# Генераторы списков — это специальный синтаксис, определяющий правила создания
# и заполнения списков.
# В общем виде эта конструкция записывается следующим образом:
# L = [ a for a in some_iter_obj if cond ]
# Такая запись аналогична следующей:
# L = []

# for a in some_iter_obj:
#     if cond:
#         L.append(a)
# Разберем синтаксис генератора списка по частям.
# В основе лежит цикл for-in, записывающийся по всем правилам,
# которые обсуждались ранее. Перед ним записывается общий вид элементов списка, а после — условие, по которому элемент включается в список.
#
# Рассмотрим несколько примеров.
#
# Напишем генератор списков, в котором будут храниться квадраты первых
# десяти натуральных чисел.
# squares = [i**2 for i in range(1, 11)]
# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
# Можно модифицировать этот генератор списков таким образом,
# что в список будут включаться квадраты только от нечетных чисел.
# squares = [i**2 for i in range(1, 11) if i % 2 == 1]
# [1, 9, 25, 49, 81]
# Тип элемента, который будет включаться в список может быть любым.
# Например, можно составить список из кортежей:
# list_tuples = [(i, i**2) for i in range(1, 11)]
#[(1, 1),
# (2, 4),
# (3, 9),
# (4, 16),
# (5, 25),
# (6, 36),
# (7, 49),
# (8, 64),
# (9, 81),
# (10, 100)]
# А используя вложенные генераторы списков можно создать матрицу «одним махом»:
# M = [[i+j for j in range(5)] for i in range(5)]
#[[0, 1, 2, 3, 4],
# [1, 2, 3, 4, 5],
# [2, 3, 4, 5, 6],
# [3, 4, 5, 6, 7],
# [4, 5, 6, 7, 8]]
# В данном случае мы на каждой итерации цикла с индексом i создавали
# вложенный список с индексами j, что в итоге позволило создать матрицу (таблицу чисел).
#
# Задание 13.8.13
# Задание на самопроверку.
#
# При помощи генератора списков создайте таблицу умножения чисел от 1 до 10.
tab_multiplication = [[i*j for j in range(1, 11)] for i in range(1, 11)]
print(tab_multiplication)


