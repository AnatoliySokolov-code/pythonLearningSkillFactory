# Создание пустого списка происходит
# присваиванием переменной пустых квадратных скобок:
s = []
# При создании такого объекта в памяти резервируется область,
# в которой хранятся ссылки на элементы списка.
# Используя схожий синтаксис, можно создать наполнение списка:
s = [0, 'hello', (1, 'a')]
# Нами был создан объект типа «список», содержащий три элемента:
# целое число, строка и кортеж.
# Как можно заметить, создание списков очень схоже с созданием кортежей,
# только вместо круглых скобок используются квадратные.
# Принципиальное отличие между ними заключается в том,
# что списки можно изменять — добавлять новые объекты и удалять существующие.
# Добавление объекта осуществляется с помощью метода append().
# Метод — это функция, которая применяется к определённому объекту, используя символ точку:
# допустим, у нас есть список, содержащий первые 4 буквы латинского алфавита
letters = ['a', 'b', 'c', 'd']

# с помощью метода append() мы добавляем ещё один элемент в список
letters.append('e')

print(letters)
# ['a', 'b', 'c', 'd', 'e']
# В этом частично заключается изменяемость списков.
# Изначально его размер был равен 4 элементам, но мы его изменили,
# иными словами, он мутировал, и размер стал равен 5 элементам.
# Список — это в первую очередь упорядоченная структура данных.
# Это означает, что каждый элемент списка имеет свой индекс —
# порядковый номер элемента в списке.
# Буква «a» — это первая буква латинского алфавита.
# В списке letters, который мы создали, она также находится на «первом» месте,
# но если мы захотим получить элемент по его индексу,
# то натолкнемся на интересную особенность:
print(letters[1])
# b
# Если вы были знакомы с другими языками программирования,
# то уже знаете, что часто индексация элементов начинается с нуля.
# Именно это мы и наблюдаем — «первый» элемент на самом деле нулевой
# (с нулевым индексом):
print(letters[0])
# a
#Как же получить последний элемент списка,
# если его точная длина заранее неизвестна?
# Существует два способа. Первый — использование длины списка.
# Её можно узнать с помощью встроенной функции len(),
# которая возвращает длину любого итерируемого объекта.
# К ним относят строки, списки, кортежи и объекты некоторых других типов данных.
# С ними подробнее познакомимся в следующих модулях,
# а пока что можно получать радость от использования такой функции:
print(len(letters))
# 5
# Как и ожидалось, длина списка равна 5. Тогда
# доступ к последнему элементу можно получить, если уменьшить эту длину на 1:
print(letters[len(letters)-1])
# e
# По мере изучения языка, мы всё больше будем сталкиваться с большим количеством
# вложенных конструкций, поэтому к ним нужно постепенно привыкать.
# В данном случае с помощью len(letters) мы узнали длину списка и уменьшили
# её на единицу.
#
# Полученное число мы использовали в качестве индекса,
# записав его в квадратные скобки рядом с названием переменной списка
# letters[len(letters)-1], после чего вывели полученный элемент в консоль.
# Такой подход является универсальным, потому что
# уже нам не нужно знать длину списка во время написания программы.
#
# Если мы добавим ещё какое-то количество элементов в список,
# такой способ будет продолжать работать:
letters.append('f') # добавляем ещё одну букву
letters.append('g') # и ещё одну

print(letters[len(letters)-1])
# g
# Такой способ является решением «в лоб». Однако, согласно философии Python, «простое лучше, чем сложное», поэтому есть
# ещё один подход, соответствующий «питоновскому» стилю кода —
# использование отрицательных индексов:
# Отрицательные индексы позволяют вывернуть наизнанку список и
# нумеровать его в обратном порядке. И тогда последний
# элемент будет иметь индекс -1, предпоследний — -2 и так далее.
print(letters[-1])
# g
print(letters[-4])
# d
# Использование отрицательных индексов для получения элементов с хвоста списка является не только удобным решением,
# но и рекомендуемым, как соответствующее философии Python.
# Изменение структуры списка может происходить не только путем её увеличения
# (добавления новых объектов), но и удаления уже существующих.
# Для этого можно использовать метод pop():
print(letters)
# ['a', 'b', 'c', 'd', 'e', 'f', 'g']

letters.pop() # вызов метода без аргументов удаляет последний элемент списка

print(letters)
# ['a', 'b', 'c', 'd', 'e', 'f']
# был удалён последний элемент

letters.pop(0) # или можно удалить элемент по его индексу

print(letters)
# ['b', 'c', 'd', 'e', 'f']
# был удалён нулевой элемент

letters.pop(3) # и не обязательно удалять из начала или конца списка

print(letters)
# ['b', 'c', 'd', 'f']
# был удалён элемент с индексом 3

